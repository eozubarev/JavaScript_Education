// Копирование объектов и ссылки
// https://learn.javascript.ru/object-copy

// Одно из фундаментальных отличий объектов от примитивов заключается в том,
// что объекты хранятся и копируются «по ссылке», тогда как примитивные значения:
// строки, числа, логические значения и т.д. – всегда копируются «как целое значение».

let message = "Привет!";
let phrase = message;
// В результате мы имеем две независимые переменные, каждая из которых хранит строку "Привет!".





// Объекты ведут себя иначе.
// Переменная, которой присвоен объект, хранит не сам объект,
// а его «адрес в памяти» – другими словами, «ссылку» на него.

let user = {
    name: "John"
};

// Объект хранится где-то в памяти,
// в то время как переменная user имеет лишь «ссылку» на него.
// Когда мы выполняем действия с объектом, к примеру, берём свойство user.name,
// движок JavaScript просматривает то, что находится по этому адресу, и выполняет операцию с самим объектом.




//При копировании переменной объекта копируется ссылка, но сам объект не дублируется.

let user = { name: 'John' };
let admin = user; // копируется ссылка
admin.name = 'Pete'; // изменено по ссылке из переменной "admin"
alert(user.name); // 'Pete', изменения видны по ссылке из переменной "user"




// Сравнение по ссылке
// Два объекта равны только в том случае, если это один и тот же объект.
// Например, здесь a и b ссылаются на один и тот же объект, поэтому они равны:

let a = {};
let b = a; // копирование по ссылке

alert( a == b ); // true, обе переменные ссылаются на один и тот же объект
alert( a === b ); // true





// Клонирование и объединение, Object.assign
let user2 = {
    name: "John",
    age: 30
};

let clone = {}; // новый пустой объект

// давайте скопируем все свойства user в него
for (let key in user2) {
    clone[key] = user2[key];
}

// теперь clone это полностью независимый объект с тем же содержимым
clone.name = "Pete"; // изменим в нём данные

alert( user2.name ); // все ещё John в первоначальном объекте




//Также мы можем использовать для этого метод Object.assign.
Object.assign(dest, [src1, src2, src3...])

// Первый аргумент dest — целевой объект.
// Остальные аргументы src1, ..., srcN (может быть столько, сколько необходимо) являются исходными объектами
// Метод копирует свойства всех исходных объектов src1, ..., srcN в целевой объект dest. Другими словами,
// свойства всех аргументов, начиная со второго, копируются в первый объект. Возвращает объект dest.

let user3 = { name: "John" };

let permissions1 = { canView: true };
let permissions2 = { canEdit: true };

// копируем все свойства из permissions1 и permissions2 в user
Object.assign(user3, permissions1, permissions2);

// теперь user = { name: "John", canView: true, canEdit: true }
//Если скопированное имя свойства уже существует, оно будет перезаписано:




