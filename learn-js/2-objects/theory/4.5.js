// Конструктор, оператор "new"
// https://learn.javascript.ru/constructor-new

// Обычный синтаксис {...} позволяет создать только один объект.
// Но зачастую нам нужно создать множество похожих, однотипных объектов, таких как пользователи, элементы меню и так далее.
// Это можно сделать при помощи функции-конструктора и оператора "new".




// Функции-конструкторы технически являются обычными функциями. Но есть два соглашения:
// 1. Имя функции-конструктора должно начинаться с большой буквы.
// 2. Функция-конструктор должна выполняться только с помощью оператора "new".

function User (name) {
    this.name = name;
    this.isAdmin = false;
}

const jack = new User("Jack")

console.log(jack)




// Когда функция вызывается как new User(...), происходит следующее:

// 1. Создаётся новый пустой объект, и он присваивается this.
// 2. Выполняется тело функции. Обычно оно модифицирует this, добавляя туда новые свойства.
// 4. Возвращается значение this.
//     Другими словами, new User(...) делает что-то вроде:

function User(name) {
    // this = {};  (неявно)

    // добавляет свойства к this
    this.name = name;
    this.isAdmin = false;

    // return this;  (неявно)
}

// Таким образом, let user = new User("Jack") возвращает тот же результат, что и:
let user = {
    name: "Jack",
    isAdmin: false
};
// Теперь, если нам будет необходимо создать других пользователей,
// мы можем просто вызвать new User("Ann"), new User("Alice")



// Это и является основной целью конструкторов – реализовать код для многократного создания однотипных объектов.



// new function() { … }
// Если в нашем коде присутствует большое количество строк, создающих один сложный объект,
// то мы можем обернуть их в функцию-конструктор, которая будет немедленно вызвана, вот так:
// создаём функцию и сразу же вызываем её с помощью new

let user2 = new function() {
    this.name = "John";
    this.isAdmin = false;
    // ...другой код для создания пользователя
    // возможна любая сложная логика и инструкции
    // локальные переменные и так далее
};

// Такой конструктор не может быть вызван снова, так как он нигде не сохраняется,
// просто создаётся и тут же вызывается. Таким образом, этот трюк направлен на
// инкапсуляцию кода, который создаёт отдельный объект, без возможности повторного использования в будущем.




// Возврат значения из конструктора, return
// При вызове return с объектом, вместо this вернётся объект.
// При вызове return с примитивным значением, оно проигнорируется.
function BigUser() {
    this.name = "John";
    return { name: "Godzilla" };  // <-- возвращает этот объект
}
alert( new BigUser().name );  // Godzilla, получили этот объект




